# -*- coding: utf-8 -*-
"""Demographic analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UTJcfNE7F78UNtvxygtGZY3PfU_EdX-0
"""

!pip install s3fs

!pip install pgeocode

!pip install fsspec==2023.9.0

import s3fs
import fsspec
import pgeocode
import pandas as pd
import plotly.express as px

census_file_path='s3://amazon-sagemaker-058264306111-us-east-1-e23504aef6c5/dzd_5l5kah6gnsnq3r/3pzf7egi4el3xj/dev/Census.csv'

census_data = pd.read_csv(census_file_path)

col_total_pop = 'Estimate!!SEX AND AGE!!Total population'
col_asian     = 'Estimate!!RACE!!Total population!!One race!!Asian'
col_20_24     = 'Estimate!!SEX AND AGE!!Total population!!20 to 24 years'
col_25_34     = 'Estimate!!SEX AND AGE!!Total population!!25 to 34 years'
col_35_44     = 'Estimate!!SEX AND AGE!!Total population!!35 to 44 years'

keep_cols = [
    'Geographic Area Name',
    col_total_pop,
    col_asian,
    col_20_24,
    col_25_34,
    col_35_44
]
census_data = census_data[keep_cols]

# Find zipcode
census_data.dropna(subset=['Geographic Area Name'], inplace=True)
census_data['ZIP Code'] = (
    census_data['Geographic Area Name']
    .str.replace("ZCTA5 ", "", regex=False)
    .str.zfill(5)
)

from functools import lru_cache
import pandas as pd
import numpy as np

# Add state
nomi = pgeocode.Nominatim('us')

# Add caching to prevent repeated lookups of the same ZIP code
@lru_cache(maxsize=None)
def get_state(zip_str):
    if pd.isnull(zip_str):
        return None
    try:
        info = nomi.query_postal_code(str(zip_str))
        return info.state_code
    except:
        return None

# Convert ZIP codes to strings and create a unique set
unique_zips = census_data['ZIP Code'].dropna().astype(str).unique()

# Create a mapping dictionary for all unique ZIP codes
zip_to_state = {zip_code: get_state(zip_code) for zip_code in unique_zips}

# Use map function instead of apply
census_data['State'] = census_data['ZIP Code'].astype(str).map(zip_to_state)

# Drop rows with null states
census_data.dropna(subset=['State'], inplace=True)

# Convert data to numberic
for col in [col_total_pop, col_asian, col_20_24, col_25_34, col_35_44]:
    census_data[col] = pd.to_numeric(census_data[col], errors='coerce')

census_data.dropna(subset=[col_total_pop, col_asian, col_20_24, col_25_34, col_35_44], inplace=True)

# Demographic
# All race in the age range
census_data['age_20_44_all'] = (
    census_data[col_20_24] +
    census_data[col_25_34] +
    census_data[col_35_44]
)
# Approax asian in the age range
census_data['asian_20_44_approx'] = (
    census_data[col_asian] *
    (census_data['age_20_44_all'] / census_data[col_total_pop])
)

census_data.head()

# State data aggregation
state_data = (
    census_data
    .groupby('State', as_index=False)
    .agg({
         'age_20_44_all': 'sum',
         'asian_20_44_approx': 'sum'
    })
)
state_data.rename(columns={
    'age_20_44_all': 'total_age_20_44_state',
    'asian_20_44_approx': 'asian_20_44_state'
}, inplace=True)

# Calculate the percentage
state_data['asian_pct_age_20_44'] = (
    state_data['asian_20_44_state'] / state_data['total_age_20_44_state'] * 100
)

# Asian pop map
fig_map = px.choropleth(
    state_data,
    locations='State',
    locationmode='USA-states',
    color='asian_20_44_state',
    color_continuous_scale='Blues',
    scope='usa',
    title='Asian Population (Age 20–44, Approx) by State'
)
fig_map.show()

# Pop vs fraction
fig_scatter = px.scatter(
    state_data,
    x='asian_20_44_state',
    y='asian_pct_age_20_44',
    text='State',
    title='Asian Population Percentage (Age 20–44) vs Asian Population (Age 20–44) by State',
    labels={
        'asian_20_44_state': 'Asian Population (Age 20–44)',
        'asian_pct_age_20_44': 'Asian Population Percentage (Age 20–44)'
    }
)
fig_scatter.update_traces(textposition='top center')
fig_scatter.show()

# Zipcode within states
census_data['asian_20_44_percentage'] = (
    census_data['asian_20_44_approx'] / census_data['age_20_44_all'] * 100
)

def plot_scatter_by_state(state_list):
    for state in state_list:
        df_state = census_data[census_data['State'] == state]

        fig = px.scatter(
            df_state,
            x='asian_20_44_percentage',
            y='asian_20_44_approx',
            hover_data=['ZIP Code'],
            title=f'Asian Population (20-44) vs Asian Pop Percentage (20-44) in {state}',
            labels={
                'asian_20_44_percentage': 'Asian Population Percentage (20-44)',
                'asian_20_44_approx': 'Asian Population (20-44)'
            }
        )
        fig.show()

plot_scatter_by_state(['CA', 'NY', 'TX', 'HI'])